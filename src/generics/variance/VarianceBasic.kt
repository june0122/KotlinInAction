package generics.variance

/**
 * 변성: 제네릭과 하위 타입
 *
 * 변성(variance) 개념은 List<String>와 List<Any>와 같이 기저 타입이 같고 타입 인자가 다른 여러 타입이 서로 어떤 관계가 있는지 설명하는 개념이다.
 * 변성을 잘 활용하면 사용에 불편하지 않으면서 타입 안정성을 보장하는 API를 만들 수 있다.
 */

/**
 * 코틀린에서는 리스트의 변경 가능성에 따라 적절한 인터페이스를 선택하면 안전하지 못한 함수 호출을 막을 수 있다.
 * 함수가 읽기 전용 리스트를 받는다면 더 구체적인 타입의 원소를 갖는 리스트를 그 함수에 넘갈 수 있다.
 * 하지만 리스트가 변경 가능하다면 그럴 수 없다.
 */

/**
 * 타입과 클래스는 같은 용어가 아니다.
 *
 * List는 타입이 아니라 클래스다.
 * 타입 인자를 치환한 List<Int>, List<String?>, List<List<String>> 등은 모두 제대로 된 타입이다.
 */

/*
fun test(i: Int) {
    val n: Number = i // Int가 Number의 하위 타입이어서 컴파일된다.
    fun f(s: String) { /* ... */ }
    f(i) // Int가 String의 하위 타입이 아니어서 컴파일되지 않는다.
}
 */

/** 널이 될 수 없는 타입은 널이 될 수 있는 타입의 하위 타입이다. 하지만 두 타입 모두 같은 클래스에 해당한다. */
val s: String = "abc"
val t: String? = s
